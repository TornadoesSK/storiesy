/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/user/": {
    /** Get Current User */
    get: operations["get_current_user_user__get"];
  };
  "/user": {
    /** Get Current User */
    get: operations["get_current_user_user_get"];
  };
  "/login_check/": {
    /** Login Check */
    get: operations["login_check_login_check__get"];
  };
  "/login_check": {
    /** Login Check */
    get: operations["login_check_login_check_get"];
  };
  "/token/": {
    /** Get Token */
    get: operations["get_token_token__get"];
  };
  "/token": {
    /** Get Token */
    get: operations["get_token_token_get"];
  };
  "/app_id/": {
    /** App Id */
    get: operations["app_id_app_id__get"];
  };
  "/app_id": {
    /** App Id */
    get: operations["app_id_app_id_get"];
  };
  "/login/": {
    /** Login */
    post: operations["login_login__post"];
  };
  "/login": {
    /** Login */
    post: operations["login_login_post"];
  };
  "/": {
    /** Main */
    get: operations["main__get"];
    /** Main */
    head: operations["main__head"];
  };
  "/config": {
    /** Get Config */
    get: operations["get_config_config_get"];
  };
  "/config/": {
    /** Get Config */
    get: operations["get_config_config__get"];
  };
  "/static/{path}": {
    /** Static Resource */
    get: operations["static_resource_static__path__get"];
  };
  "/assets/{path}": {
    /** Build Resource */
    get: operations["build_resource_assets__path__get"];
  };
  "/favicon.ico": {
    /** Favicon */
    get: operations["favicon_favicon_ico_get"];
  };
  "/proxy={url_path}": {
    /** Reverse Proxy */
    get: operations["reverse_proxy_proxy__url_path__get"];
    /** Reverse Proxy */
    head: operations["reverse_proxy_proxy__url_path__head"];
  };
  "/file={path_or_url}": {
    /** File */
    get: operations["file_file__path_or_url__get"];
    /** File */
    head: operations["file_file__path_or_url__head"];
  };
  "/file/{path}": {
    /** File Deprecated */
    get: operations["file_deprecated_file__path__get"];
  };
  "/reset": {
    /** Reset Iterator */
    post: operations["reset_iterator_reset_post"];
  };
  "/reset/": {
    /** Reset Iterator */
    post: operations["reset_iterator_reset__post"];
  };
  "/api/{api_name}/": {
    /** Predict */
    post: operations["predict_api__api_name___post"];
  };
  "/api/{api_name}": {
    /** Predict */
    post: operations["predict_api__api_name__post"];
  };
  "/run/{api_name}/": {
    /** Predict */
    post: operations["predict_run__api_name___post"];
  };
  "/run/{api_name}": {
    /** Predict */
    post: operations["predict_run__api_name__post"];
  };
  "/queue/status": {
    /** Get Queue Status */
    get: operations["get_queue_status_queue_status_get"];
  };
  "/upload": {
    /** Upload File */
    post: operations["upload_file_upload_post"];
  };
  "/startup-events": {
    /** Startup Events */
    get: operations["startup_events_startup_events_get"];
  };
  "/theme.css": {
    /** Theme Css */
    get: operations["theme_css_theme_css_get"];
  };
  "/robots.txt": {
    /** Robots Txt */
    get: operations["robots_txt_robots_txt_get"];
  };
  "/internal/progress": {
    /** Progressapi */
    post: operations["progressapi_internal_progress_post"];
  };
  "/sdapi/v1/txt2img": {
    /** Text2Imgapi */
    post: operations["text2imgapi_sdapi_v1_txt2img_post"];
  };
  "/sdapi/v1/img2img": {
    /** Img2Imgapi */
    post: operations["img2imgapi_sdapi_v1_img2img_post"];
  };
  "/sdapi/v1/extra-single-image": {
    /** Extras Single Image Api */
    post: operations["extras_single_image_api_sdapi_v1_extra_single_image_post"];
  };
  "/sdapi/v1/extra-batch-images": {
    /** Extras Batch Images Api */
    post: operations["extras_batch_images_api_sdapi_v1_extra_batch_images_post"];
  };
  "/sdapi/v1/png-info": {
    /** Pnginfoapi */
    post: operations["pnginfoapi_sdapi_v1_png_info_post"];
  };
  "/sdapi/v1/progress": {
    /** Progressapi */
    get: operations["progressapi_sdapi_v1_progress_get"];
  };
  "/sdapi/v1/interrogate": {
    /** Interrogateapi */
    post: operations["interrogateapi_sdapi_v1_interrogate_post"];
  };
  "/sdapi/v1/interrupt": {
    /** Interruptapi */
    post: operations["interruptapi_sdapi_v1_interrupt_post"];
  };
  "/sdapi/v1/skip": {
    /** Skip */
    post: operations["skip_sdapi_v1_skip_post"];
  };
  "/sdapi/v1/options": {
    /** Get Config */
    get: operations["get_config_sdapi_v1_options_get"];
    /** Set Config */
    post: operations["set_config_sdapi_v1_options_post"];
  };
  "/sdapi/v1/cmd-flags": {
    /** Get Cmd Flags */
    get: operations["get_cmd_flags_sdapi_v1_cmd_flags_get"];
  };
  "/sdapi/v1/samplers": {
    /** Get Samplers */
    get: operations["get_samplers_sdapi_v1_samplers_get"];
  };
  "/sdapi/v1/upscalers": {
    /** Get Upscalers */
    get: operations["get_upscalers_sdapi_v1_upscalers_get"];
  };
  "/sdapi/v1/sd-models": {
    /** Get Sd Models */
    get: operations["get_sd_models_sdapi_v1_sd_models_get"];
  };
  "/sdapi/v1/hypernetworks": {
    /** Get Hypernetworks */
    get: operations["get_hypernetworks_sdapi_v1_hypernetworks_get"];
  };
  "/sdapi/v1/face-restorers": {
    /** Get Face Restorers */
    get: operations["get_face_restorers_sdapi_v1_face_restorers_get"];
  };
  "/sdapi/v1/realesrgan-models": {
    /** Get Realesrgan Models */
    get: operations["get_realesrgan_models_sdapi_v1_realesrgan_models_get"];
  };
  "/sdapi/v1/prompt-styles": {
    /** Get Prompt Styles */
    get: operations["get_prompt_styles_sdapi_v1_prompt_styles_get"];
  };
  "/sdapi/v1/embeddings": {
    /** Get Embeddings */
    get: operations["get_embeddings_sdapi_v1_embeddings_get"];
  };
  "/sdapi/v1/refresh-checkpoints": {
    /** Refresh Checkpoints */
    post: operations["refresh_checkpoints_sdapi_v1_refresh_checkpoints_post"];
  };
  "/sdapi/v1/create/embedding": {
    /** Create Embedding */
    post: operations["create_embedding_sdapi_v1_create_embedding_post"];
  };
  "/sdapi/v1/create/hypernetwork": {
    /** Create Hypernetwork */
    post: operations["create_hypernetwork_sdapi_v1_create_hypernetwork_post"];
  };
  "/sdapi/v1/preprocess": {
    /** Preprocess */
    post: operations["preprocess_sdapi_v1_preprocess_post"];
  };
  "/sdapi/v1/train/embedding": {
    /** Train Embedding */
    post: operations["train_embedding_sdapi_v1_train_embedding_post"];
  };
  "/sdapi/v1/train/hypernetwork": {
    /** Train Hypernetwork */
    post: operations["train_hypernetwork_sdapi_v1_train_hypernetwork_post"];
  };
  "/sdapi/v1/memory": {
    /** Get Memory */
    get: operations["get_memory_sdapi_v1_memory_get"];
  };
  "/sdapi/v1/unload-checkpoint": {
    /** Unloadapi */
    post: operations["unloadapi_sdapi_v1_unload_checkpoint_post"];
  };
  "/sdapi/v1/reload-checkpoint": {
    /** Reloadapi */
    post: operations["reloadapi_sdapi_v1_reload_checkpoint_post"];
  };
  "/sdapi/v1/scripts": {
    /** Get Scripts List */
    get: operations["get_scripts_list_sdapi_v1_scripts_get"];
  };
  "/sd_extra_networks/thumb": {
    /** Fetch File */
    get: operations["fetch_file_sd_extra_networks_thumb_get"];
  };
  "/sd_extra_networks/metadata": {
    /** Get Metadata */
    get: operations["get_metadata_sd_extra_networks_metadata_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Body_login_login__post */
    Body_login_login__post: {
      /** Grant Type */
      grant_type?: string;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope 
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string;
      /** Client Secret */
      client_secret?: string;
    };
    /** Body_login_login_post */
    Body_login_login_post: {
      /** Grant Type */
      grant_type?: string;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope 
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string;
      /** Client Secret */
      client_secret?: string;
    };
    /** Body_upload_file_upload_post */
    Body_upload_file_upload_post: {
      /** Files */
      files: (string)[];
    };
    /** CreateResponse */
    CreateResponse: {
      /**
       * Create info 
       * @description Response string from create embedding or hypernetwork task.
       */
      info: string;
    };
    /** EmbeddingItem */
    EmbeddingItem: {
      /**
       * Step 
       * @description The number of steps that were used to train this embedding, if available
       */
      step?: number;
      /**
       * SD Checkpoint 
       * @description The hash of the checkpoint this embedding was trained on, if available
       */
      sd_checkpoint?: string;
      /**
       * SD Checkpoint Name 
       * @description The name of the checkpoint this embedding was trained on, if available. Note that this is the name that was used by the trainer; for a stable identifier, use `sd_checkpoint` instead
       */
      sd_checkpoint_name?: string;
      /**
       * Shape 
       * @description The length of each individual vector in the embedding
       */
      shape: number;
      /**
       * Vectors 
       * @description The number of vectors in the embedding
       */
      vectors: number;
    };
    /** EmbeddingsResponse */
    EmbeddingsResponse: {
      /**
       * Loaded 
       * @description Embeddings loaded for the current model
       */
      loaded: {
        [key: string]: components["schemas"]["EmbeddingItem"] | undefined;
      };
      /**
       * Skipped 
       * @description Embeddings skipped for the current model (likely due to architecture incompatibility)
       */
      skipped: {
        [key: string]: components["schemas"]["EmbeddingItem"] | undefined;
      };
    };
    /** Estimation */
    Estimation: {
      /**
       * Msg 
       * @default estimation
       */
      msg?: string;
      /** Rank */
      rank?: number;
      /** Queue Size */
      queue_size: number;
      /** Avg Event Process Time */
      avg_event_process_time?: number;
      /** Avg Event Concurrent Process Time */
      avg_event_concurrent_process_time?: number;
      /** Rank Eta */
      rank_eta?: number;
      /** Queue Eta */
      queue_eta: number;
    };
    /** ExtrasBatchImagesRequest */
    ExtrasBatchImagesRequest: {
      /**
       * Resize Mode 
       * @description Sets the resize mode: 0 to upscale by upscaling_resize amount, 1 to upscale up to upscaling_resize_h x upscaling_resize_w. 
       * @default 0 
       * @enum {integer}
       */
      resize_mode?: 0 | 1;
      /**
       * Show results 
       * @description Should the backend return the generated image? 
       * @default true
       */
      show_extras_results?: boolean;
      /**
       * GFPGAN Visibility 
       * @description Sets the visibility of GFPGAN, values should be between 0 and 1. 
       * @default 0
       */
      gfpgan_visibility?: number;
      /**
       * CodeFormer Visibility 
       * @description Sets the visibility of CodeFormer, values should be between 0 and 1. 
       * @default 0
       */
      codeformer_visibility?: number;
      /**
       * CodeFormer Weight 
       * @description Sets the weight of CodeFormer, values should be between 0 and 1. 
       * @default 0
       */
      codeformer_weight?: number;
      /**
       * Upscaling Factor 
       * @description By how much to upscale the image, only used when resize_mode=0. 
       * @default 2
       */
      upscaling_resize?: number;
      /**
       * Target Width 
       * @description Target width for the upscaler to hit. Only used when resize_mode=1. 
       * @default 512
       */
      upscaling_resize_w?: number;
      /**
       * Target Height 
       * @description Target height for the upscaler to hit. Only used when resize_mode=1. 
       * @default 512
       */
      upscaling_resize_h?: number;
      /**
       * Crop to fit 
       * @description Should the upscaler crop the image to fit in the chosen size? 
       * @default true
       */
      upscaling_crop?: boolean;
      /**
       * Main upscaler 
       * @description The name of the main upscaler to use, it has to be one of this list: None , Lanczos , Nearest , ESRGAN_4x , LDSR , R-ESRGAN 4x+ , R-ESRGAN 4x+ Anime6B , ScuNET GAN , ScuNET PSNR , SwinIR 4x 
       * @default None
       */
      upscaler_1?: string;
      /**
       * Secondary upscaler 
       * @description The name of the secondary upscaler to use, it has to be one of this list: None , Lanczos , Nearest , ESRGAN_4x , LDSR , R-ESRGAN 4x+ , R-ESRGAN 4x+ Anime6B , ScuNET GAN , ScuNET PSNR , SwinIR 4x 
       * @default None
       */
      upscaler_2?: string;
      /**
       * Secondary upscaler visibility 
       * @description Sets the visibility of secondary upscaler, values should be between 0 and 1. 
       * @default 0
       */
      extras_upscaler_2_visibility?: number;
      /**
       * Upscale first 
       * @description Should the upscaler run before restoring faces? 
       * @default false
       */
      upscale_first?: boolean;
      /**
       * Images 
       * @description List of images to work on. Must be Base64 strings
       */
      imageList: (components["schemas"]["FileData"])[];
    };
    /** ExtrasBatchImagesResponse */
    ExtrasBatchImagesResponse: {
      /**
       * HTML info 
       * @description A series of HTML tags containing the process info.
       */
      html_info: string;
      /**
       * Images 
       * @description The generated images in base64 format.
       */
      images: (string)[];
    };
    /** ExtrasSingleImageRequest */
    ExtrasSingleImageRequest: {
      /**
       * Resize Mode 
       * @description Sets the resize mode: 0 to upscale by upscaling_resize amount, 1 to upscale up to upscaling_resize_h x upscaling_resize_w. 
       * @default 0 
       * @enum {integer}
       */
      resize_mode?: 0 | 1;
      /**
       * Show results 
       * @description Should the backend return the generated image? 
       * @default true
       */
      show_extras_results?: boolean;
      /**
       * GFPGAN Visibility 
       * @description Sets the visibility of GFPGAN, values should be between 0 and 1. 
       * @default 0
       */
      gfpgan_visibility?: number;
      /**
       * CodeFormer Visibility 
       * @description Sets the visibility of CodeFormer, values should be between 0 and 1. 
       * @default 0
       */
      codeformer_visibility?: number;
      /**
       * CodeFormer Weight 
       * @description Sets the weight of CodeFormer, values should be between 0 and 1. 
       * @default 0
       */
      codeformer_weight?: number;
      /**
       * Upscaling Factor 
       * @description By how much to upscale the image, only used when resize_mode=0. 
       * @default 2
       */
      upscaling_resize?: number;
      /**
       * Target Width 
       * @description Target width for the upscaler to hit. Only used when resize_mode=1. 
       * @default 512
       */
      upscaling_resize_w?: number;
      /**
       * Target Height 
       * @description Target height for the upscaler to hit. Only used when resize_mode=1. 
       * @default 512
       */
      upscaling_resize_h?: number;
      /**
       * Crop to fit 
       * @description Should the upscaler crop the image to fit in the chosen size? 
       * @default true
       */
      upscaling_crop?: boolean;
      /**
       * Main upscaler 
       * @description The name of the main upscaler to use, it has to be one of this list: None , Lanczos , Nearest , ESRGAN_4x , LDSR , R-ESRGAN 4x+ , R-ESRGAN 4x+ Anime6B , ScuNET GAN , ScuNET PSNR , SwinIR 4x 
       * @default None
       */
      upscaler_1?: string;
      /**
       * Secondary upscaler 
       * @description The name of the secondary upscaler to use, it has to be one of this list: None , Lanczos , Nearest , ESRGAN_4x , LDSR , R-ESRGAN 4x+ , R-ESRGAN 4x+ Anime6B , ScuNET GAN , ScuNET PSNR , SwinIR 4x 
       * @default None
       */
      upscaler_2?: string;
      /**
       * Secondary upscaler visibility 
       * @description Sets the visibility of secondary upscaler, values should be between 0 and 1. 
       * @default 0
       */
      extras_upscaler_2_visibility?: number;
      /**
       * Upscale first 
       * @description Should the upscaler run before restoring faces? 
       * @default false
       */
      upscale_first?: boolean;
      /**
       * Image 
       * @description Image to work on, must be a Base64 string containing the image's data. 
       * @default
       */
      image?: string;
    };
    /** ExtrasSingleImageResponse */
    ExtrasSingleImageResponse: {
      /**
       * HTML info 
       * @description A series of HTML tags containing the process info.
       */
      html_info: string;
      /**
       * Image 
       * @description The generated image in base64 format.
       */
      image?: string;
    };
    /** FaceRestorerItem */
    FaceRestorerItem: {
      /** Name */
      name: string;
      /** Path */
      cmd_dir?: string;
    };
    /** FileData */
    FileData: {
      /**
       * File data 
       * @description Base64 representation of the file
       */
      data: string;
      /** File name */
      name: string;
    };
    /** Flags */
    Flags: {
      /**
       * F 
       * @description ==SUPPRESS== 
       * @default false
       */
      f?: boolean;
      /**
       * Update All Extensions 
       * @description launch.py argument: download updates for all extensions when starting the program 
       * @default false
       */
      update_all_extensions?: boolean;
      /**
       * Skip Python Version Check 
       * @description launch.py argument: do not check python version 
       * @default false
       */
      skip_python_version_check?: boolean;
      /**
       * Skip Torch Cuda Test 
       * @description launch.py argument: do not check if CUDA is able to work properly 
       * @default false
       */
      skip_torch_cuda_test?: boolean;
      /**
       * Reinstall Xformers 
       * @description launch.py argument: install the appropriate version of xformers even if you have some version already installed 
       * @default false
       */
      reinstall_xformers?: boolean;
      /**
       * Reinstall Torch 
       * @description launch.py argument: install the appropriate version of torch even if you have some version already installed 
       * @default false
       */
      reinstall_torch?: boolean;
      /**
       * Update Check 
       * @description launch.py argument: chck for updates at startup 
       * @default false
       */
      update_check?: boolean;
      /**
       * Tests 
       * @description launch.py argument: run tests in the specified directory
       */
      tests?: string;
      /**
       * No Tests 
       * @description launch.py argument: do not run tests even if --tests option is specified 
       * @default false
       */
      no_tests?: boolean;
      /**
       * Skip Install 
       * @description launch.py argument: skip installation of packages 
       * @default false
       */
      skip_install?: boolean;
      /**
       * Data Dir 
       * @description base path where all user data is stored 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui
       */
      data_dir?: string;
      /**
       * Config 
       * @description path to config which constructs model 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui/configs/v1-inference.yaml
       */
      config?: string;
      /**
       * Ckpt 
       * @description path to checkpoint of stable diffusion model; if specified, this checkpoint will be added to the list of checkpoints and loaded 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui/model.ckpt
       */
      ckpt?: string;
      /**
       * Ckpt Dir 
       * @description Path to directory with stable diffusion checkpoints
       */
      ckpt_dir?: string;
      /**
       * Vae Dir 
       * @description Path to directory with VAE files
       */
      vae_dir?: string;
      /**
       * Gfpgan Dir 
       * @description GFPGAN directory 
       * @default ./GFPGAN
       */
      gfpgan_dir?: string;
      /**
       * Gfpgan Model 
       * @description GFPGAN model file name
       */
      gfpgan_model?: string;
      /**
       * No Half 
       * @description do not switch the model to 16-bit floats 
       * @default false
       */
      no_half?: boolean;
      /**
       * No Half Vae 
       * @description do not switch the VAE model to 16-bit floats 
       * @default false
       */
      no_half_vae?: boolean;
      /**
       * No Progressbar Hiding 
       * @description do not hide progressbar in gradio UI (we hide it because it slows down ML if you have hardware acceleration in browser) 
       * @default false
       */
      no_progressbar_hiding?: boolean;
      /**
       * Max Batch Count 
       * @description maximum batch count value for the UI 
       * @default 16
       */
      max_batch_count?: number;
      /**
       * Embeddings Dir 
       * @description embeddings directory for textual inversion (default: embeddings) 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui/embeddings
       */
      embeddings_dir?: string;
      /**
       * Textual Inversion Templates Dir 
       * @description directory with textual inversion templates 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui/textual_inversion_templates
       */
      textual_inversion_templates_dir?: string;
      /**
       * Hypernetwork Dir 
       * @description hypernetwork directory 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui/models/hypernetworks
       */
      hypernetwork_dir?: string;
      /**
       * Localizations Dir 
       * @description localizations directory 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui/localizations
       */
      localizations_dir?: string;
      /**
       * Allow Code 
       * @description allow custom script execution from webui 
       * @default false
       */
      allow_code?: boolean;
      /**
       * Medvram 
       * @description enable stable diffusion model optimizations for sacrificing a little speed for low VRM usage 
       * @default false
       */
      medvram?: boolean;
      /**
       * Lowvram 
       * @description enable stable diffusion model optimizations for sacrificing a lot of speed for very low VRM usage 
       * @default false
       */
      lowvram?: boolean;
      /**
       * Lowram 
       * @description load stable diffusion checkpoint weights to VRAM instead of RAM 
       * @default false
       */
      lowram?: boolean;
      /**
       * Always Batch Cond Uncond 
       * @description disables cond/uncond batching that is enabled to save memory with --medvram or --lowvram 
       * @default false
       */
      always_batch_cond_uncond?: boolean;
      /**
       * Unload Gfpgan 
       * @description does not do anything. 
       * @default false
       */
      unload_gfpgan?: boolean;
      /**
       * Precision 
       * @description evaluate at this precision 
       * @default autocast
       */
      precision?: string;
      /**
       * Upcast Sampling 
       * @description upcast sampling. No effect with --no-half. Usually produces similar results to --no-half with better performance while using less memory. 
       * @default false
       */
      upcast_sampling?: boolean;
      /**
       * Share 
       * @description use share=True for gradio and make the UI accessible through their site 
       * @default false
       */
      share?: boolean;
      /**
       * Ngrok 
       * @description ngrok authtoken, alternative to gradio --share
       */
      ngrok?: string;
      /**
       * Ngrok Region 
       * @description The region in which ngrok should start. 
       * @default us
       */
      ngrok_region?: string;
      /**
       * Enable Insecure Extension Access 
       * @description enable extensions tab regardless of other options 
       * @default false
       */
      enable_insecure_extension_access?: boolean;
      /**
       * Codeformer Models Path 
       * @description Path to directory with codeformer model file(s). 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui/models/Codeformer
       */
      codeformer_models_path?: string;
      /**
       * Gfpgan Models Path 
       * @description Path to directory with GFPGAN model file(s). 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui/models/GFPGAN
       */
      gfpgan_models_path?: string;
      /**
       * Esrgan Models Path 
       * @description Path to directory with ESRGAN model file(s). 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui/models/ESRGAN
       */
      esrgan_models_path?: string;
      /**
       * Bsrgan Models Path 
       * @description Path to directory with BSRGAN model file(s). 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui/models/BSRGAN
       */
      bsrgan_models_path?: string;
      /**
       * Realesrgan Models Path 
       * @description Path to directory with RealESRGAN model file(s). 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui/models/RealESRGAN
       */
      realesrgan_models_path?: string;
      /**
       * Clip Models Path 
       * @description Path to directory with CLIP model file(s).
       */
      clip_models_path?: string;
      /**
       * Xformers 
       * @description enable xformers for cross attention layers 
       * @default false
       */
      xformers?: boolean;
      /**
       * Force Enable Xformers 
       * @description enable xformers for cross attention layers regardless of whether the checking code thinks you can run it; do not make bug reports if this fails to work 
       * @default false
       */
      force_enable_xformers?: boolean;
      /**
       * Xformers Flash Attention 
       * @description enable xformers with Flash Attention to improve reproducibility (supported for SD2.x or variant only) 
       * @default false
       */
      xformers_flash_attention?: boolean;
      /**
       * Deepdanbooru 
       * @description does not do anything 
       * @default false
       */
      deepdanbooru?: boolean;
      /**
       * Opt Split Attention 
       * @description force-enables Doggettx's cross-attention layer optimization. By default, it's on for torch cuda. 
       * @default false
       */
      opt_split_attention?: boolean;
      /**
       * Opt Sub Quad Attention 
       * @description enable memory efficient sub-quadratic cross-attention layer optimization 
       * @default false
       */
      opt_sub_quad_attention?: boolean;
      /**
       * Sub Quad Q Chunk Size 
       * @description query chunk size for the sub-quadratic cross-attention layer optimization to use 
       * @default 1024
       */
      sub_quad_q_chunk_size?: number;
      /**
       * Sub Quad Kv Chunk Size 
       * @description kv chunk size for the sub-quadratic cross-attention layer optimization to use
       */
      sub_quad_kv_chunk_size?: string;
      /**
       * Sub Quad Chunk Threshold 
       * @description the percentage of VRAM threshold for the sub-quadratic cross-attention layer optimization to use chunking
       */
      sub_quad_chunk_threshold?: string;
      /**
       * Opt Split Attention Invokeai 
       * @description force-enables InvokeAI's cross-attention layer optimization. By default, it's on when cuda is unavailable. 
       * @default false
       */
      opt_split_attention_invokeai?: boolean;
      /**
       * Opt Split Attention V1 
       * @description enable older version of split attention optimization that does not consume all the VRAM it can find 
       * @default false
       */
      opt_split_attention_v1?: boolean;
      /**
       * Opt Sdp Attention 
       * @description enable scaled dot product cross-attention layer optimization; requires PyTorch 2.* 
       * @default false
       */
      opt_sdp_attention?: boolean;
      /**
       * Opt Sdp No Mem Attention 
       * @description enable scaled dot product cross-attention layer optimization without memory efficient attention, makes image generation deterministic; requires PyTorch 2.* 
       * @default false
       */
      opt_sdp_no_mem_attention?: boolean;
      /**
       * Disable Opt Split Attention 
       * @description force-disables cross-attention layer optimization 
       * @default false
       */
      disable_opt_split_attention?: boolean;
      /**
       * Disable Nan Check 
       * @description do not check if produced images/latent spaces have nans; useful for running without a checkpoint in CI 
       * @default false
       */
      disable_nan_check?: boolean;
      /**
       * Use Cpu 
       * @description use CPU as torch device for specified modules 
       * @default []
       */
      use_cpu?: (Record<string, never>)[];
      /**
       * Listen 
       * @description launch gradio with 0.0.0.0 as server name, allowing to respond to network requests 
       * @default false
       */
      listen?: boolean;
      /**
       * Port 
       * @description launch gradio with given server port, you need root/admin rights for ports < 1024, defaults to 7860 if available
       */
      port?: string;
      /**
       * Show Negative Prompt 
       * @description does not do anything 
       * @default false
       */
      show_negative_prompt?: boolean;
      /**
       * Ui Config File 
       * @description filename to use for ui configuration 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui/ui-config.json
       */
      ui_config_file?: string;
      /**
       * Hide Ui Dir Config 
       * @description hide directory configuration from webui 
       * @default false
       */
      hide_ui_dir_config?: boolean;
      /**
       * Freeze Settings 
       * @description disable editing settings 
       * @default false
       */
      freeze_settings?: boolean;
      /**
       * Ui Settings File 
       * @description filename to use for ui settings 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui/config.json
       */
      ui_settings_file?: string;
      /**
       * Gradio Debug 
       * @description launch gradio with --debug option 
       * @default false
       */
      gradio_debug?: boolean;
      /**
       * Gradio Auth 
       * @description set gradio authentication like "username:password"; or comma-delimit multiple like "u1:p1,u2:p2,u3:p3"
       */
      gradio_auth?: string;
      /**
       * Gradio Auth Path 
       * @description set gradio authentication file path ex. "/path/to/auth/file" same auth format as --gradio-auth
       */
      gradio_auth_path?: string;
      /**
       * Gradio Img2Img Tool 
       * @description does not do anything
       */
      gradio_img2img_tool?: string;
      /**
       * Gradio Inpaint Tool 
       * @description does not do anything
       */
      gradio_inpaint_tool?: string;
      /**
       * Opt Channelslast 
       * @description change memory type for stable diffusion to channels last 
       * @default false
       */
      opt_channelslast?: boolean;
      /**
       * Styles File 
       * @description filename to use for styles 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui/styles.csv
       */
      styles_file?: string;
      /**
       * Autolaunch 
       * @description open the webui URL in the system's default browser upon launch 
       * @default false
       */
      autolaunch?: boolean;
      /**
       * Theme 
       * @description launches the UI with light or dark theme
       */
      theme?: string;
      /**
       * Use Textbox Seed 
       * @description use textbox for seeds in UI (no up/down, but possible to input long seeds) 
       * @default false
       */
      use_textbox_seed?: boolean;
      /**
       * Disable Console Progressbars 
       * @description do not output progressbars to console 
       * @default false
       */
      disable_console_progressbars?: boolean;
      /**
       * Enable Console Prompts 
       * @description print prompts to console when generating with txt2img and img2img 
       * @default false
       */
      enable_console_prompts?: boolean;
      /**
       * Vae Path 
       * @description Checkpoint to use as VAE; setting this argument disables all settings related to VAE
       */
      vae_path?: string;
      /**
       * Disable Safe Unpickle 
       * @description disable checking pytorch models for malicious code 
       * @default false
       */
      disable_safe_unpickle?: boolean;
      /**
       * Api 
       * @description use api=True to launch the API together with the webui (use --nowebui instead for only the API) 
       * @default false
       */
      api?: boolean;
      /**
       * Api Auth 
       * @description Set authentication for API like "username:password"; or comma-delimit multiple like "u1:p1,u2:p2,u3:p3"
       */
      api_auth?: string;
      /**
       * Api Log 
       * @description use api-log=True to enable logging of all API requests 
       * @default false
       */
      api_log?: boolean;
      /**
       * Nowebui 
       * @description use api=True to launch the API instead of the webui 
       * @default false
       */
      nowebui?: boolean;
      /**
       * Ui Debug Mode 
       * @description Don't load model to quickly launch UI 
       * @default false
       */
      ui_debug_mode?: boolean;
      /**
       * Device Id 
       * @description Select the default CUDA device to use (export CUDA_VISIBLE_DEVICES=0,1,etc might be needed before)
       */
      device_id?: string;
      /**
       * Administrator 
       * @description Administrator rights 
       * @default false
       */
      administrator?: boolean;
      /**
       * Cors Allow Origins 
       * @description Allowed CORS origin(s) in the form of a comma-separated list (no spaces)
       */
      cors_allow_origins?: string;
      /**
       * Cors Allow Origins Regex 
       * @description Allowed CORS origin(s) in the form of a single regular expression
       */
      cors_allow_origins_regex?: string;
      /**
       * Tls Keyfile 
       * @description Partially enables TLS, requires --tls-certfile to fully function
       */
      tls_keyfile?: string;
      /**
       * Tls Certfile 
       * @description Partially enables TLS, requires --tls-keyfile to fully function
       */
      tls_certfile?: string;
      /**
       * Server Name 
       * @description Sets hostname of server
       */
      server_name?: string;
      /**
       * Gradio Queue 
       * @description does not do anything 
       * @default true
       */
      gradio_queue?: boolean;
      /**
       * No Gradio Queue 
       * @description Disables gradio queue; causes the webpage to use http requests instead of websockets; was the defaul in earlier versions 
       * @default false
       */
      no_gradio_queue?: boolean;
      /**
       * Skip Version Check 
       * @description Do not check versions of torch and xformers 
       * @default false
       */
      skip_version_check?: boolean;
      /**
       * No Hashing 
       * @description disable sha256 hashing of checkpoints to help loading performance 
       * @default false
       */
      no_hashing?: boolean;
      /**
       * No Download Sd Model 
       * @description don't download SD1.5 model even if no model is found in --ckpt-dir 
       * @default false
       */
      no_download_sd_model?: boolean;
      /**
       * Ldsr Models Path 
       * @description Path to directory with LDSR model file(s). 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui/models/LDSR
       */
      ldsr_models_path?: string;
      /**
       * Lora Dir 
       * @description Path to directory with Lora networks. 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui/models/Lora
       */
      lora_dir?: string;
      /**
       * Scunet Models Path 
       * @description Path to directory with ScuNET model file(s). 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui/models/ScuNET
       */
      scunet_models_path?: string;
      /**
       * Swinir Models Path 
       * @description Path to directory with SwinIR model file(s). 
       * @default /mnt/batch/tasks/shared/LS_root/mounts/clusters/storiesy/code/Users/demkomic/stable-diffusion-webui/models/SwinIR
       */
      swinir_models_path?: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: (components["schemas"]["ValidationError"])[];
    };
    /** HypernetworkItem */
    HypernetworkItem: {
      /** Name */
      name: string;
      /** Path */
      path?: string;
    };
    /** ImageToImageResponse */
    ImageToImageResponse: {
      /**
       * Image 
       * @description The generated image in base64 format.
       */
      images?: (string)[];
      /** Parameters */
      parameters: Record<string, never>;
      /** Info */
      info: string;
    };
    /** InterrogateRequest */
    InterrogateRequest: {
      /**
       * Image 
       * @description Image to work on, must be a Base64 string containing the image's data. 
       * @default
       */
      image?: string;
      /**
       * Model 
       * @description The interrogate model used. 
       * @default clip
       */
      model?: string;
    };
    /** MemoryResponse */
    MemoryResponse: {
      /**
       * RAM 
       * @description System memory stats
       */
      ram: Record<string, never>;
      /**
       * CUDA 
       * @description nVidia CUDA memory stats
       */
      cuda: Record<string, never>;
    };
    /** Options */
    Options: {
      /**
       * Samples Save 
       * @description Always save all generated images 
       * @default true
       */
      samples_save?: boolean;
      /**
       * Samples Format 
       * @description File format for images 
       * @default png
       */
      samples_format?: string;
      /**
       * Samples Filename Pattern 
       * @description Images filename pattern 
       * @default
       */
      samples_filename_pattern?: string;
      /**
       * Save Images Add Number 
       * @description Add number to filename when saving 
       * @default true
       */
      save_images_add_number?: boolean;
      /**
       * Grid Save 
       * @description Always save all generated image grids 
       * @default true
       */
      grid_save?: boolean;
      /**
       * Grid Format 
       * @description File format for grids 
       * @default png
       */
      grid_format?: string;
      /**
       * Grid Extended Filename 
       * @description Add extended info (seed, prompt) to filename when saving grid 
       * @default false
       */
      grid_extended_filename?: boolean;
      /**
       * Grid Only If Multiple 
       * @description Do not save grids consisting of one picture 
       * @default true
       */
      grid_only_if_multiple?: boolean;
      /**
       * Grid Prevent Empty Spots 
       * @description Prevent empty spots in grid (when set to autodetect) 
       * @default false
       */
      grid_prevent_empty_spots?: boolean;
      /**
       * N Rows 
       * @description Grid row count; use -1 for autodetect and 0 for it to be same as batch size 
       * @default -1
       */
      n_rows?: number;
      /**
       * Enable Pnginfo 
       * @description Save text information about generation parameters as chunks to png files 
       * @default true
       */
      enable_pnginfo?: boolean;
      /**
       * Save Txt 
       * @description Create a text file next to every image with generation parameters. 
       * @default false
       */
      save_txt?: boolean;
      /**
       * Save Images Before Face Restoration 
       * @description Save a copy of image before doing face restoration. 
       * @default false
       */
      save_images_before_face_restoration?: boolean;
      /**
       * Save Images Before Highres Fix 
       * @description Save a copy of image before applying highres fix. 
       * @default false
       */
      save_images_before_highres_fix?: boolean;
      /**
       * Save Images Before Color Correction 
       * @description Save a copy of image before applying color correction to img2img results 
       * @default false
       */
      save_images_before_color_correction?: boolean;
      /**
       * Save Mask 
       * @description For inpainting, save a copy of the greyscale mask 
       * @default false
       */
      save_mask?: boolean;
      /**
       * Save Mask Composite 
       * @description For inpainting, save a masked composite 
       * @default false
       */
      save_mask_composite?: boolean;
      /**
       * Jpeg Quality 
       * @description Quality for saved jpeg images 
       * @default 80
       */
      jpeg_quality?: number;
      /**
       * Webp Lossless 
       * @description Use lossless compression for webp images 
       * @default false
       */
      webp_lossless?: boolean;
      /**
       * Export For 4Chan 
       * @description If the saved image file size is above the limit, or its either width or height are above the limit, save a downscaled copy as JPG 
       * @default true
       */
      export_for_4chan?: boolean;
      /**
       * Img Downscale Threshold 
       * @description File size limit for the above option, MB 
       * @default 4
       */
      img_downscale_threshold?: number;
      /**
       * Target Side Length 
       * @description Width/height limit for the above option, in pixels 
       * @default 4000
       */
      target_side_length?: number;
      /**
       * Img Max Size Mp 
       * @description Maximum image size, in megapixels 
       * @default 200
       */
      img_max_size_mp?: number;
      /**
       * Use Original Name Batch 
       * @description Use original name for output filename during batch process in extras tab 
       * @default true
       */
      use_original_name_batch?: boolean;
      /**
       * Use Upscaler Name As Suffix 
       * @description Use upscaler name as filename suffix in the extras tab 
       * @default false
       */
      use_upscaler_name_as_suffix?: boolean;
      /**
       * Save Selected Only 
       * @description When using 'Save' button, only save a single selected image 
       * @default true
       */
      save_selected_only?: boolean;
      /**
       * Do Not Add Watermark 
       * @description Do not add watermark to images 
       * @default false
       */
      do_not_add_watermark?: boolean;
      /**
       * Temp Dir 
       * @description Directory for temporary images; leave empty for default 
       * @default
       */
      temp_dir?: string;
      /**
       * Clean Temp Dir At Start 
       * @description Cleanup non-default temporary directory when starting webui 
       * @default false
       */
      clean_temp_dir_at_start?: boolean;
      /**
       * Outdir Samples 
       * @description Output directory for images; if empty, defaults to three directories below 
       * @default
       */
      outdir_samples?: string;
      /**
       * Outdir Txt2Img Samples 
       * @description Output directory for txt2img images 
       * @default outputs/txt2img-images
       */
      outdir_txt2img_samples?: string;
      /**
       * Outdir Img2Img Samples 
       * @description Output directory for img2img images 
       * @default outputs/img2img-images
       */
      outdir_img2img_samples?: string;
      /**
       * Outdir Extras Samples 
       * @description Output directory for images from extras tab 
       * @default outputs/extras-images
       */
      outdir_extras_samples?: string;
      /**
       * Outdir Grids 
       * @description Output directory for grids; if empty, defaults to two directories below 
       * @default
       */
      outdir_grids?: string;
      /**
       * Outdir Txt2Img Grids 
       * @description Output directory for txt2img grids 
       * @default outputs/txt2img-grids
       */
      outdir_txt2img_grids?: string;
      /**
       * Outdir Img2Img Grids 
       * @description Output directory for img2img grids 
       * @default outputs/img2img-grids
       */
      outdir_img2img_grids?: string;
      /**
       * Outdir Save 
       * @description Directory for saving images using the Save button 
       * @default log/images
       */
      outdir_save?: string;
      /**
       * Save To Dirs 
       * @description Save images to a subdirectory 
       * @default true
       */
      save_to_dirs?: boolean;
      /**
       * Grid Save To Dirs 
       * @description Save grids to a subdirectory 
       * @default true
       */
      grid_save_to_dirs?: boolean;
      /**
       * Use Save To Dirs For Ui 
       * @description When using "Save" button, save images to a subdirectory 
       * @default false
       */
      use_save_to_dirs_for_ui?: boolean;
      /**
       * Directories Filename Pattern 
       * @description Directory name pattern 
       * @default [date]
       */
      directories_filename_pattern?: string;
      /**
       * Directories Max Prompt Words 
       * @description Max prompt words for [prompt_words] pattern 
       * @default 8
       */
      directories_max_prompt_words?: number;
      /**
       * Esrgan Tile 
       * @description Tile size for ESRGAN upscalers. 0 = no tiling. 
       * @default 192
       */
      ESRGAN_tile?: number;
      /**
       * Esrgan Tile Overlap 
       * @description Tile overlap, in pixels for ESRGAN upscalers. Low values = visible seam. 
       * @default 8
       */
      ESRGAN_tile_overlap?: number;
      /**
       * Realesrgan Enabled Models 
       * @description Select which Real-ESRGAN models to show in the web UI. (Requires restart) 
       * @default [
       *   "R-ESRGAN 4x+",
       *   "R-ESRGAN 4x+ Anime6B"
       * ]
       */
      realesrgan_enabled_models?: (Record<string, never>)[];
      /**
       * Upscaler For Img2Img 
       * @description Upscaler for img2img
       */
      upscaler_for_img2img?: null;
      /**
       * Ldsr Steps 
       * @description LDSR processing steps. Lower = faster 
       * @default 100
       */
      ldsr_steps?: number;
      /**
       * Ldsr Cached 
       * @description Cache LDSR model in memory 
       * @default false
       */
      ldsr_cached?: boolean;
      /**
       * Swin Tile 
       * @description Tile size for all SwinIR. 
       * @default 192
       */
      SWIN_tile?: number;
      /**
       * Swin Tile Overlap 
       * @description Tile overlap, in pixels for SwinIR. Low values = visible seam. 
       * @default 8
       */
      SWIN_tile_overlap?: number;
      /**
       * Face Restoration Model 
       * @description Face restoration model 
       * @default CodeFormer
       */
      face_restoration_model?: string;
      /**
       * Code Former Weight 
       * @description CodeFormer weight parameter; 0 = maximum effect; 1 = minimum effect 
       * @default 0.5
       */
      code_former_weight?: number;
      /**
       * Face Restoration Unload 
       * @description Move face restoration model from VRAM into RAM after processing 
       * @default false
       */
      face_restoration_unload?: boolean;
      /**
       * Show Warnings 
       * @description Show warnings in console. 
       * @default false
       */
      show_warnings?: boolean;
      /**
       * Memmon Poll Rate 
       * @description VRAM usage polls per second during generation. Set to 0 to disable. 
       * @default 8
       */
      memmon_poll_rate?: number;
      /**
       * Samples Log Stdout 
       * @description Always print all generation info to standard output 
       * @default false
       */
      samples_log_stdout?: boolean;
      /**
       * Multiple Tqdm 
       * @description Add a second progress bar to the console that shows progress for an entire job. 
       * @default true
       */
      multiple_tqdm?: boolean;
      /**
       * Print Hypernet Extra 
       * @description Print extra hypernetwork information to console. 
       * @default false
       */
      print_hypernet_extra?: boolean;
      /**
       * Unload Models When Training 
       * @description Move VAE and CLIP to RAM when training if possible. Saves VRAM. 
       * @default false
       */
      unload_models_when_training?: boolean;
      /**
       * Pin Memory 
       * @description Turn on pin_memory for DataLoader. Makes training slightly faster but can increase memory usage. 
       * @default false
       */
      pin_memory?: boolean;
      /**
       * Save Optimizer State 
       * @description Saves Optimizer state as separate *.optim file. Training of embedding or HN can be resumed with the matching optim file. 
       * @default false
       */
      save_optimizer_state?: boolean;
      /**
       * Save Training Settings To Txt 
       * @description Save textual inversion and hypernet settings to a text file whenever training starts. 
       * @default true
       */
      save_training_settings_to_txt?: boolean;
      /**
       * Dataset Filename Word Regex 
       * @description Filename word regex 
       * @default
       */
      dataset_filename_word_regex?: string;
      /**
       * Dataset Filename Join String 
       * @description Filename join string 
       * @default
       */
      dataset_filename_join_string?: string;
      /**
       * Training Image Repeats Per Epoch 
       * @description Number of repeats for a single input image per epoch; used only for displaying epoch number 
       * @default 1
       */
      training_image_repeats_per_epoch?: number;
      /**
       * Training Write Csv Every 
       * @description Save an csv containing the loss to log directory every N steps, 0 to disable 
       * @default 500
       */
      training_write_csv_every?: number;
      /**
       * Training Xattention Optimizations 
       * @description Use cross attention optimizations while training 
       * @default false
       */
      training_xattention_optimizations?: boolean;
      /**
       * Training Enable Tensorboard 
       * @description Enable tensorboard logging. 
       * @default false
       */
      training_enable_tensorboard?: boolean;
      /**
       * Training Tensorboard Save Images 
       * @description Save generated images within tensorboard. 
       * @default false
       */
      training_tensorboard_save_images?: boolean;
      /**
       * Training Tensorboard Flush Every 
       * @description How often, in seconds, to flush the pending tensorboard events and summaries to disk. 
       * @default 120
       */
      training_tensorboard_flush_every?: number;
      /**
       * Sd Model Checkpoint 
       * @description Stable Diffusion checkpoint
       */
      sd_model_checkpoint?: string;
      /**
       * Sd Checkpoint Cache 
       * @description Checkpoints to cache in RAM 
       * @default 0
       */
      sd_checkpoint_cache?: number;
      /**
       * Sd Vae Checkpoint Cache 
       * @description VAE Checkpoints to cache in RAM 
       * @default 0
       */
      sd_vae_checkpoint_cache?: number;
      /**
       * Sd Vae 
       * @description SD VAE 
       * @default Automatic
       */
      sd_vae?: string;
      /**
       * Sd Vae As Default 
       * @description Ignore selected VAE for stable diffusion checkpoints that have their own .vae.pt next to them 
       * @default true
       */
      sd_vae_as_default?: boolean;
      /**
       * Inpainting Mask Weight 
       * @description Inpainting conditioning mask strength 
       * @default 1
       */
      inpainting_mask_weight?: number;
      /**
       * Initial Noise Multiplier 
       * @description Noise multiplier for img2img 
       * @default 1
       */
      initial_noise_multiplier?: number;
      /**
       * Img2Img Color Correction 
       * @description Apply color correction to img2img results to match original colors. 
       * @default false
       */
      img2img_color_correction?: boolean;
      /**
       * Img2Img Fix Steps 
       * @description With img2img, do exactly the amount of steps the slider specifies (normally you'd do less with less denoising). 
       * @default false
       */
      img2img_fix_steps?: boolean;
      /**
       * Img2Img Background Color 
       * @description With img2img, fill image's transparent parts with this color. 
       * @default #ffffff
       */
      img2img_background_color?: string;
      /**
       * Enable Quantization 
       * @description Enable quantization in K samplers for sharper and cleaner results. This may change existing seeds. Requires restart to apply. 
       * @default false
       */
      enable_quantization?: boolean;
      /**
       * Enable Emphasis 
       * @description Emphasis: use (text) to make model pay more attention to text and [text] to make it pay less attention 
       * @default true
       */
      enable_emphasis?: boolean;
      /**
       * Enable Batch Seeds 
       * @description Make K-diffusion samplers produce same images in a batch as when making a single image 
       * @default true
       */
      enable_batch_seeds?: boolean;
      /**
       * Comma Padding Backtrack 
       * @description Increase coherency by padding from the last comma within n tokens when using more than 75 tokens 
       * @default 20
       */
      comma_padding_backtrack?: number;
      /**
       * Clip Stop At Last Layers 
       * @description Clip skip 
       * @default 1
       */
      CLIP_stop_at_last_layers?: number;
      /**
       * Upcast Attn 
       * @description Upcast cross attention layer to float32 
       * @default false
       */
      upcast_attn?: boolean;
      /**
       * Use Old Emphasis Implementation 
       * @description Use old emphasis implementation. Can be useful to reproduce old seeds. 
       * @default false
       */
      use_old_emphasis_implementation?: boolean;
      /**
       * Use Old Karras Scheduler Sigmas 
       * @description Use old karras scheduler sigmas (0.1 to 10). 
       * @default false
       */
      use_old_karras_scheduler_sigmas?: boolean;
      /**
       * No Dpmpp Sde Batch Determinism 
       * @description Do not make DPM++ SDE deterministic across different batch sizes. 
       * @default false
       */
      no_dpmpp_sde_batch_determinism?: boolean;
      /**
       * Use Old Hires Fix Width Height 
       * @description For hires fix, use width/height sliders to set final resolution rather than first pass (disables Upscale by, Resize width/height to). 
       * @default false
       */
      use_old_hires_fix_width_height?: boolean;
      /**
       * Interrogate Keep Models In Memory 
       * @description Interrogate: keep models in VRAM 
       * @default false
       */
      interrogate_keep_models_in_memory?: boolean;
      /**
       * Interrogate Return Ranks 
       * @description Interrogate: include ranks of model tags matches in results (Has no effect on caption-based interrogators). 
       * @default false
       */
      interrogate_return_ranks?: boolean;
      /**
       * Interrogate Clip Num Beams 
       * @description Interrogate: num_beams for BLIP 
       * @default 1
       */
      interrogate_clip_num_beams?: number;
      /**
       * Interrogate Clip Min Length 
       * @description Interrogate: minimum description length (excluding artists, etc..) 
       * @default 24
       */
      interrogate_clip_min_length?: number;
      /**
       * Interrogate Clip Max Length 
       * @description Interrogate: maximum description length 
       * @default 48
       */
      interrogate_clip_max_length?: number;
      /**
       * Interrogate Clip Dict Limit 
       * @description CLIP: maximum number of lines in text file (0 = No limit) 
       * @default 1500
       */
      interrogate_clip_dict_limit?: number;
      /**
       * Interrogate Clip Skip Categories 
       * @description CLIP: skip inquire categories 
       * @default []
       */
      interrogate_clip_skip_categories?: (Record<string, never>)[];
      /**
       * Interrogate Deepbooru Score Threshold 
       * @description Interrogate: deepbooru score threshold 
       * @default 0.5
       */
      interrogate_deepbooru_score_threshold?: number;
      /**
       * Deepbooru Sort Alpha 
       * @description Interrogate: deepbooru sort alphabetically 
       * @default true
       */
      deepbooru_sort_alpha?: boolean;
      /**
       * Deepbooru Use Spaces 
       * @description use spaces for tags in deepbooru 
       * @default false
       */
      deepbooru_use_spaces?: boolean;
      /**
       * Deepbooru Escape 
       * @description escape (\) brackets in deepbooru (so they are used as literal brackets and not for emphasis) 
       * @default true
       */
      deepbooru_escape?: boolean;
      /**
       * Deepbooru Filter Tags 
       * @description filter out those tags from deepbooru output (separated by comma) 
       * @default
       */
      deepbooru_filter_tags?: string;
      /**
       * Extra Networks Default View 
       * @description Default view for Extra Networks 
       * @default cards
       */
      extra_networks_default_view?: string;
      /**
       * Extra Networks Default Multiplier 
       * @description Multiplier for extra networks 
       * @default 1
       */
      extra_networks_default_multiplier?: number;
      /**
       * Extra Networks Card Width 
       * @description Card width for Extra Networks (px) 
       * @default 0
       */
      extra_networks_card_width?: number;
      /**
       * Extra Networks Card Height 
       * @description Card height for Extra Networks (px) 
       * @default 0
       */
      extra_networks_card_height?: number;
      /**
       * Extra Networks Add Text Separator 
       * @description Extra text to add before <...> when adding extra network to prompt 
       * @default
       */
      extra_networks_add_text_separator?: string;
      /**
       * Sd Hypernetwork 
       * @description Add hypernetwork to prompt 
       * @default None
       */
      sd_hypernetwork?: string;
      /**
       * Sd Lora 
       * @description Add Lora to prompt 
       * @default None
       */
      sd_lora?: string;
      /**
       * Return Grid 
       * @description Show grid in results for web 
       * @default true
       */
      return_grid?: boolean;
      /**
       * Return Mask 
       * @description For inpainting, include the greyscale mask in results for web 
       * @default false
       */
      return_mask?: boolean;
      /**
       * Return Mask Composite 
       * @description For inpainting, include masked composite in results for web 
       * @default false
       */
      return_mask_composite?: boolean;
      /**
       * Do Not Show Images 
       * @description Do not show any images in results for web 
       * @default false
       */
      do_not_show_images?: boolean;
      /**
       * Add Model Hash To Info 
       * @description Add model hash to generation information 
       * @default true
       */
      add_model_hash_to_info?: boolean;
      /**
       * Add Model Name To Info 
       * @description Add model name to generation information 
       * @default true
       */
      add_model_name_to_info?: boolean;
      /**
       * Disable Weights Auto Swap 
       * @description When reading generation parameters from text into UI (from PNG info or pasted text), do not change the selected model/checkpoint. 
       * @default true
       */
      disable_weights_auto_swap?: boolean;
      /**
       * Send Seed 
       * @description Send seed when sending prompt or image to other interface 
       * @default true
       */
      send_seed?: boolean;
      /**
       * Send Size 
       * @description Send size when sending prompt or image to another interface 
       * @default true
       */
      send_size?: boolean;
      /**
       * Font 
       * @description Font for image grids that have text 
       * @default
       */
      font?: string;
      /**
       * Js Modal Lightbox 
       * @description Enable full page image viewer 
       * @default true
       */
      js_modal_lightbox?: boolean;
      /**
       * Js Modal Lightbox Initially Zoomed 
       * @description Show images zoomed in by default in full page image viewer 
       * @default true
       */
      js_modal_lightbox_initially_zoomed?: boolean;
      /**
       * Show Progress In Title 
       * @description Show generation progress in window title. 
       * @default true
       */
      show_progress_in_title?: boolean;
      /**
       * Samplers In Dropdown 
       * @description Use dropdown for sampler selection instead of radio group 
       * @default true
       */
      samplers_in_dropdown?: boolean;
      /**
       * Dimensions And Batch Together 
       * @description Show Width/Height and Batch sliders in same row 
       * @default true
       */
      dimensions_and_batch_together?: boolean;
      /**
       * Keyedit Precision Attention 
       * @description Ctrl+up/down precision when editing (attention:1.1) 
       * @default 0.1
       */
      keyedit_precision_attention?: number;
      /**
       * Keyedit Precision Extra 
       * @description Ctrl+up/down precision when editing <extra networks:0.9> 
       * @default 0.05
       */
      keyedit_precision_extra?: number;
      /**
       * Quicksettings 
       * @description Quicksettings list 
       * @default sd_model_checkpoint
       */
      quicksettings?: string;
      /**
       * Hidden Tabs 
       * @description Hidden UI tabs (requires restart) 
       * @default []
       */
      hidden_tabs?: (Record<string, never>)[];
      /**
       * Ui Reorder 
       * @description txt2img/img2img UI item order 
       * @default inpaint, sampler, checkboxes, hires_fix, dimensions, cfg, seed, batch, override_settings, scripts
       */
      ui_reorder?: string;
      /**
       * Ui Extra Networks Tab Reorder 
       * @description Extra networks tab order 
       * @default
       */
      ui_extra_networks_tab_reorder?: string;
      /**
       * Localization 
       * @description Localization (requires restart) 
       * @default None
       */
      localization?: string;
      /**
       * Show Progressbar 
       * @description Show progressbar 
       * @default true
       */
      show_progressbar?: boolean;
      /**
       * Live Previews Enable 
       * @description Show live previews of the created image 
       * @default true
       */
      live_previews_enable?: boolean;
      /**
       * Show Progress Grid 
       * @description Show previews of all images generated in a batch as a grid 
       * @default true
       */
      show_progress_grid?: boolean;
      /**
       * Show Progress Every N Steps 
       * @description Show new live preview image every N sampling steps. Set to -1 to show after completion of batch. 
       * @default 10
       */
      show_progress_every_n_steps?: number;
      /**
       * Show Progress Type 
       * @description Image creation progress preview mode 
       * @default Approx NN
       */
      show_progress_type?: string;
      /**
       * Live Preview Content 
       * @description Live preview subject 
       * @default Prompt
       */
      live_preview_content?: string;
      /**
       * Live Preview Refresh Period 
       * @description Progressbar/preview update period, in milliseconds 
       * @default 1000
       */
      live_preview_refresh_period?: number;
      /**
       * Hide Samplers 
       * @description Hide samplers in user interface (requires restart) 
       * @default []
       */
      hide_samplers?: (Record<string, never>)[];
      /**
       * Eta Ddim 
       * @description eta (noise multiplier) for DDIM 
       * @default 0
       */
      eta_ddim?: number;
      /**
       * Eta Ancestral 
       * @description eta (noise multiplier) for ancestral samplers 
       * @default 1
       */
      eta_ancestral?: number;
      /**
       * Ddim Discretize 
       * @description img2img DDIM discretize 
       * @default uniform
       */
      ddim_discretize?: string;
      /**
       * S Churn 
       * @description sigma churn 
       * @default 0
       */
      s_churn?: number;
      /**
       * S Tmin 
       * @description sigma tmin 
       * @default 0
       */
      s_tmin?: number;
      /**
       * S Noise 
       * @description sigma noise 
       * @default 1
       */
      s_noise?: number;
      /**
       * Eta Noise Seed Delta 
       * @description Eta noise seed delta 
       * @default 0
       */
      eta_noise_seed_delta?: number;
      /**
       * Always Discard Next To Last Sigma 
       * @description Always discard next-to-last sigma 
       * @default false
       */
      always_discard_next_to_last_sigma?: boolean;
      /**
       * Uni Pc Variant 
       * @description UniPC variant 
       * @default bh1
       */
      uni_pc_variant?: string;
      /**
       * Uni Pc Skip Type 
       * @description UniPC skip type 
       * @default time_uniform
       */
      uni_pc_skip_type?: string;
      /**
       * Uni Pc Order 
       * @description UniPC order (must be < sampling steps) 
       * @default 3
       */
      uni_pc_order?: number;
      /**
       * Uni Pc Lower Order Final 
       * @description UniPC lower order final 
       * @default true
       */
      uni_pc_lower_order_final?: boolean;
      /**
       * Postprocessing Enable In Main Ui 
       * @description Enable postprocessing operations in txt2img and img2img tabs 
       * @default []
       */
      postprocessing_enable_in_main_ui?: (Record<string, never>)[];
      /**
       * Postprocessing Operation Order 
       * @description Postprocessing operation order 
       * @default []
       */
      postprocessing_operation_order?: (Record<string, never>)[];
      /**
       * Upscaling Max Images In Cache 
       * @description Maximum number of images in upscaling cache 
       * @default 5
       */
      upscaling_max_images_in_cache?: number;
      /**
       * Disabled Extensions 
       * @description Disable these extensions 
       * @default []
       */
      disabled_extensions?: (Record<string, never>)[];
      /**
       * Disable All Extensions 
       * @description Disable all extensions (preserves the list of disabled extensions) 
       * @default none
       */
      disable_all_extensions?: string;
      /**
       * Sd Checkpoint Hash 
       * @description SHA256 hash of the current checkpoint 
       * @default
       */
      sd_checkpoint_hash?: string;
    };
    /** PNGInfoRequest */
    PNGInfoRequest: {
      /**
       * Image 
       * @description The base64 encoded PNG image
       */
      image: string;
    };
    /** PNGInfoResponse */
    PNGInfoResponse: {
      /**
       * Image info 
       * @description A string with the parameters used to generate the image
       */
      info: string;
      /**
       * Items 
       * @description An object containing all the info the image had
       */
      items: Record<string, never>;
    };
    /** PredictBody */
    PredictBody: {
      /** Session Hash */
      session_hash?: string;
      /** Event Id */
      event_id?: string;
      /** Data */
      data: (Record<string, never>)[];
      /** Event Data */
      event_data?: Record<string, never>;
      /** Fn Index */
      fn_index?: number;
      /**
       * Batched 
       * @default false
       */
      batched?: boolean;
      /** Request */
      request?: Record<string, never> | (Record<string, never>)[];
    };
    /** PreprocessResponse */
    PreprocessResponse: {
      /**
       * Preprocess info 
       * @description Response string from preprocessing task.
       */
      info: string;
    };
    /** ProgressRequest */
    ProgressRequest: {
      /**
       * Task ID 
       * @description id of the task to get progress for
       */
      id_task?: string;
      /**
       * Live preview image ID 
       * @description id of last received last preview image 
       * @default -1
       */
      id_live_preview?: number;
    };
    /** PromptStyleItem */
    PromptStyleItem: {
      /** Name */
      name: string;
      /** Prompt */
      prompt?: string;
      /** Negative Prompt */
      negative_prompt?: string;
    };
    /** RealesrganItem */
    RealesrganItem: {
      /** Name */
      name: string;
      /** Path */
      path?: string;
      /** Scale */
      scale?: number;
    };
    /** ResetBody */
    ResetBody: {
      /** Session Hash */
      session_hash: string;
      /** Fn Index */
      fn_index: number;
    };
    /** SDModelItem */
    SDModelItem: {
      /** Title */
      title: string;
      /** Model Name */
      model_name: string;
      /** Short hash */
      hash?: string;
      /** sha256 hash */
      sha256?: string;
      /** Filename */
      filename: string;
      /** Config file */
      config?: string;
    };
    /** SamplerItem */
    SamplerItem: {
      /** Name */
      name: string;
      /** Aliases */
      aliases: (string)[];
      /** Options */
      options: {
        [key: string]: string | undefined;
      };
    };
    /** ScriptsList */
    ScriptsList: {
      /**
       * Txt2img 
       * @description Titles of scripts (txt2img)
       */
      txt2img?: (Record<string, never>)[];
      /**
       * Img2img 
       * @description Titles of scripts (img2img)
       */
      img2img?: (Record<string, never>)[];
    };
    /** StableDiffusionProcessingImg2Img */
    StableDiffusionProcessingImg2Img: {
      /** Init Images */
      init_images?: (Record<string, never>)[];
      /**
       * Resize Mode 
       * @default 0
       */
      resize_mode?: number;
      /**
       * Denoising Strength 
       * @default 0.75
       */
      denoising_strength?: number;
      /** Image Cfg Scale */
      image_cfg_scale?: number;
      /** Mask */
      mask?: string;
      /**
       * Mask Blur 
       * @default 4
       */
      mask_blur?: number;
      /**
       * Inpainting Fill 
       * @default 0
       */
      inpainting_fill?: number;
      /**
       * Inpaint Full Res 
       * @default true
       */
      inpaint_full_res?: boolean;
      /**
       * Inpaint Full Res Padding 
       * @default 0
       */
      inpaint_full_res_padding?: number;
      /**
       * Inpainting Mask Invert 
       * @default 0
       */
      inpainting_mask_invert?: number;
      /** Initial Noise Multiplier */
      initial_noise_multiplier?: number;
      /**
       * Prompt 
       * @default
       */
      prompt?: string;
      /** Styles */
      styles?: (string)[];
      /**
       * Seed 
       * @default -1
       */
      seed?: number;
      /**
       * Subseed 
       * @default -1
       */
      subseed?: number;
      /**
       * Subseed Strength 
       * @default 0
       */
      subseed_strength?: number;
      /**
       * Seed Resize From H 
       * @default -1
       */
      seed_resize_from_h?: number;
      /**
       * Seed Resize From W 
       * @default -1
       */
      seed_resize_from_w?: number;
      /** Sampler Name */
      sampler_name?: string;
      /**
       * Batch Size 
       * @default 1
       */
      batch_size?: number;
      /**
       * N Iter 
       * @default 1
       */
      n_iter?: number;
      /**
       * Steps 
       * @default 50
       */
      steps?: number;
      /**
       * Cfg Scale 
       * @default 7
       */
      cfg_scale?: number;
      /**
       * Width 
       * @default 512
       */
      width?: number;
      /**
       * Height 
       * @default 512
       */
      height?: number;
      /**
       * Restore Faces 
       * @default false
       */
      restore_faces?: boolean;
      /**
       * Tiling 
       * @default false
       */
      tiling?: boolean;
      /**
       * Do Not Save Samples 
       * @default false
       */
      do_not_save_samples?: boolean;
      /**
       * Do Not Save Grid 
       * @default false
       */
      do_not_save_grid?: boolean;
      /** Negative Prompt */
      negative_prompt?: string;
      /** Eta */
      eta?: number;
      /**
       * S Churn 
       * @default 0
       */
      s_churn?: number;
      /** S Tmax */
      s_tmax?: number;
      /**
       * S Tmin 
       * @default 0
       */
      s_tmin?: number;
      /**
       * S Noise 
       * @default 1
       */
      s_noise?: number;
      /** Override Settings */
      override_settings?: Record<string, never>;
      /**
       * Override Settings Restore Afterwards 
       * @default true
       */
      override_settings_restore_afterwards?: boolean;
      /**
       * Script Args 
       * @default []
       */
      script_args?: (Record<string, never>)[];
      /**
       * Sampler Index 
       * @default Euler
       */
      sampler_index?: string;
      /**
       * Include Init Images 
       * @default false
       */
      include_init_images?: boolean;
      /** Script Name */
      script_name?: string;
      /**
       * Send Images 
       * @default true
       */
      send_images?: boolean;
      /**
       * Save Images 
       * @default false
       */
      save_images?: boolean;
      /**
       * Alwayson Scripts 
       * @default {}
       */
      alwayson_scripts?: Record<string, never>;
    };
    /** StableDiffusionProcessingTxt2Img */
    StableDiffusionProcessingTxt2Img: {
      /**
       * Enable Hr 
       * @default false
       */
      enable_hr?: boolean;
      /**
       * Denoising Strength 
       * @default 0
       */
      denoising_strength?: number;
      /**
       * Firstphase Width 
       * @default 0
       */
      firstphase_width?: number;
      /**
       * Firstphase Height 
       * @default 0
       */
      firstphase_height?: number;
      /**
       * Hr Scale 
       * @default 2
       */
      hr_scale?: number;
      /** Hr Upscaler */
      hr_upscaler?: string;
      /**
       * Hr Second Pass Steps 
       * @default 0
       */
      hr_second_pass_steps?: number;
      /**
       * Hr Resize X 
       * @default 0
       */
      hr_resize_x?: number;
      /**
       * Hr Resize Y 
       * @default 0
       */
      hr_resize_y?: number;
      /**
       * Prompt 
       * @default
       */
      prompt?: string;
      /** Styles */
      styles?: (string)[];
      /**
       * Seed 
       * @default -1
       */
      seed?: number;
      /**
       * Subseed 
       * @default -1
       */
      subseed?: number;
      /**
       * Subseed Strength 
       * @default 0
       */
      subseed_strength?: number;
      /**
       * Seed Resize From H 
       * @default -1
       */
      seed_resize_from_h?: number;
      /**
       * Seed Resize From W 
       * @default -1
       */
      seed_resize_from_w?: number;
      /** Sampler Name */
      sampler_name?: string;
      /**
       * Batch Size 
       * @default 1
       */
      batch_size?: number;
      /**
       * N Iter 
       * @default 1
       */
      n_iter?: number;
      /**
       * Steps 
       * @default 50
       */
      steps?: number;
      /**
       * Cfg Scale 
       * @default 7
       */
      cfg_scale?: number;
      /**
       * Width 
       * @default 512
       */
      width?: number;
      /**
       * Height 
       * @default 512
       */
      height?: number;
      /**
       * Restore Faces 
       * @default false
       */
      restore_faces?: boolean;
      /**
       * Tiling 
       * @default false
       */
      tiling?: boolean;
      /**
       * Do Not Save Samples 
       * @default false
       */
      do_not_save_samples?: boolean;
      /**
       * Do Not Save Grid 
       * @default false
       */
      do_not_save_grid?: boolean;
      /** Negative Prompt */
      negative_prompt?: string;
      /** Eta */
      eta?: number;
      /**
       * S Churn 
       * @default 0
       */
      s_churn?: number;
      /** S Tmax */
      s_tmax?: number;
      /**
       * S Tmin 
       * @default 0
       */
      s_tmin?: number;
      /**
       * S Noise 
       * @default 1
       */
      s_noise?: number;
      /** Override Settings */
      override_settings?: Record<string, never>;
      /**
       * Override Settings Restore Afterwards 
       * @default true
       */
      override_settings_restore_afterwards?: boolean;
      /**
       * Script Args 
       * @default []
       */
      script_args?: (Record<string, never>)[];
      /**
       * Sampler Index 
       * @default Euler
       */
      sampler_index?: string;
      /** Script Name */
      script_name?: string;
      /**
       * Send Images 
       * @default true
       */
      send_images?: boolean;
      /**
       * Save Images 
       * @default false
       */
      save_images?: boolean;
      /**
       * Alwayson Scripts 
       * @default {}
       */
      alwayson_scripts?: Record<string, never>;
    };
    /** TextToImageResponse */
    TextToImageResponse: {
      /**
       * Image 
       * @description The generated image in base64 format.
       */
      images?: (string)[];
      /** Parameters */
      parameters: Record<string, never>;
      /** Info */
      info: string;
    };
    /** TrainResponse */
    TrainResponse: {
      /**
       * Train info 
       * @description Response string from train embedding or hypernetwork task.
       */
      info: string;
    };
    /** UpscalerItem */
    UpscalerItem: {
      /** Name */
      name: string;
      /** Model Name */
      model_name?: string;
      /** Path */
      model_path?: string;
      /** URL */
      model_url?: string;
      /** Scale */
      scale?: number;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** ProgressResponse */
    modules__api__models__ProgressResponse: {
      /**
       * Progress 
       * @description The progress with a range of 0 to 1
       */
      progress: number;
      /** ETA in secs */
      eta_relative: number;
      /**
       * State 
       * @description The current state snapshot
       */
      state: Record<string, never>;
      /**
       * Current image 
       * @description The current image in base64 format. opts.show_progress_every_n_steps is required for this to work.
       */
      current_image?: string;
      /**
       * Info text 
       * @description Info text used by WebUI.
       */
      textinfo?: string;
    };
    /** ProgressResponse */
    modules__progress__ProgressResponse: {
      /** Whether the task is being worked on right now */
      active: boolean;
      /** Whether the task is in queue */
      queued: boolean;
      /** Whether the task has already finished */
      completed: boolean;
      /**
       * Progress 
       * @description The progress with a range of 0 to 1
       */
      progress?: number;
      /** ETA in secs */
      eta?: number;
      /**
       * Live preview image 
       * @description Current live preview; a data: uri
       */
      live_preview?: string;
      /**
       * Live preview image ID 
       * @description Send this together with next request to prevent receiving same image
       */
      id_live_preview?: number;
      /**
       * Info text 
       * @description Info text used by WebUI.
       */
      textinfo?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** Get Current User */
  get_current_user_user__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Get Current User */
  get_current_user_user_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Login Check */
  login_check_login_check__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Login Check */
  login_check_login_check_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Get Token */
  get_token_token__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Get Token */
  get_token_token_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** App Id */
  app_id_app_id__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** App Id */
  app_id_app_id_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Login */
  login_login__post: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_login_login__post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Login */
  login_login_post: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_login_login_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Main */
  main__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /** Main */
  main__head: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /** Get Config */
  get_config_config_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Get Config */
  get_config_config__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Static Resource */
  static_resource_static__path__get: {
    parameters: {
      path: {
        path: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Build Resource */
  build_resource_assets__path__get: {
    parameters: {
      path: {
        path: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Favicon */
  favicon_favicon_ico_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Reverse Proxy */
  reverse_proxy_proxy__url_path__get: {
    parameters: {
      path: {
        url_path: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Reverse Proxy */
  reverse_proxy_proxy__url_path__head: {
    parameters: {
      path: {
        url_path: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** File */
  file_file__path_or_url__get: {
    parameters: {
      path: {
        path_or_url: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** File */
  file_file__path_or_url__head: {
    parameters: {
      path: {
        path_or_url: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** File Deprecated */
  file_deprecated_file__path__get: {
    parameters: {
      path: {
        path: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Reset Iterator */
  reset_iterator_reset_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetBody"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Reset Iterator */
  reset_iterator_reset__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetBody"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Predict */
  predict_api__api_name___post: {
    parameters: {
      path: {
        api_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PredictBody"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Predict */
  predict_api__api_name__post: {
    parameters: {
      path: {
        api_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PredictBody"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Predict */
  predict_run__api_name___post: {
    parameters: {
      path: {
        api_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PredictBody"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Predict */
  predict_run__api_name__post: {
    parameters: {
      path: {
        api_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PredictBody"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Queue Status */
  get_queue_status_queue_status_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Estimation"];
        };
      };
    };
  };
  /** Upload File */
  upload_file_upload_post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_file_upload_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Startup Events */
  startup_events_startup_events_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Theme Css */
  theme_css_theme_css_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/plain": string;
        };
      };
    };
  };
  /** Robots Txt */
  robots_txt_robots_txt_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/plain": string;
        };
      };
    };
  };
  /** Progressapi */
  progressapi_internal_progress_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProgressRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["modules__progress__ProgressResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Text2Imgapi */
  text2imgapi_sdapi_v1_txt2img_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StableDiffusionProcessingTxt2Img"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TextToImageResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Img2Imgapi */
  img2imgapi_sdapi_v1_img2img_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StableDiffusionProcessingImg2Img"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageToImageResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Extras Single Image Api */
  extras_single_image_api_sdapi_v1_extra_single_image_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExtrasSingleImageRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExtrasSingleImageResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Extras Batch Images Api */
  extras_batch_images_api_sdapi_v1_extra_batch_images_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExtrasBatchImagesRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExtrasBatchImagesResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Pnginfoapi */
  pnginfoapi_sdapi_v1_png_info_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PNGInfoRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PNGInfoResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Progressapi */
  progressapi_sdapi_v1_progress_get: {
    parameters: {
      query: {
        skip_current_image?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["modules__api__models__ProgressResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Interrogateapi */
  interrogateapi_sdapi_v1_interrogate_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InterrogateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Interruptapi */
  interruptapi_sdapi_v1_interrupt_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Skip */
  skip_sdapi_v1_skip_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Get Config */
  get_config_sdapi_v1_options_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Options"];
        };
      };
    };
  };
  /** Set Config */
  set_config_sdapi_v1_options_post: {
    requestBody: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Cmd Flags */
  get_cmd_flags_sdapi_v1_cmd_flags_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Flags"];
        };
      };
    };
  };
  /** Get Samplers */
  get_samplers_sdapi_v1_samplers_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["SamplerItem"])[];
        };
      };
    };
  };
  /** Get Upscalers */
  get_upscalers_sdapi_v1_upscalers_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["UpscalerItem"])[];
        };
      };
    };
  };
  /** Get Sd Models */
  get_sd_models_sdapi_v1_sd_models_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["SDModelItem"])[];
        };
      };
    };
  };
  /** Get Hypernetworks */
  get_hypernetworks_sdapi_v1_hypernetworks_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["HypernetworkItem"])[];
        };
      };
    };
  };
  /** Get Face Restorers */
  get_face_restorers_sdapi_v1_face_restorers_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["FaceRestorerItem"])[];
        };
      };
    };
  };
  /** Get Realesrgan Models */
  get_realesrgan_models_sdapi_v1_realesrgan_models_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["RealesrganItem"])[];
        };
      };
    };
  };
  /** Get Prompt Styles */
  get_prompt_styles_sdapi_v1_prompt_styles_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["PromptStyleItem"])[];
        };
      };
    };
  };
  /** Get Embeddings */
  get_embeddings_sdapi_v1_embeddings_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EmbeddingsResponse"];
        };
      };
    };
  };
  /** Refresh Checkpoints */
  refresh_checkpoints_sdapi_v1_refresh_checkpoints_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Create Embedding */
  create_embedding_sdapi_v1_create_embedding_post: {
    requestBody: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CreateResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Hypernetwork */
  create_hypernetwork_sdapi_v1_create_hypernetwork_post: {
    requestBody: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CreateResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Preprocess */
  preprocess_sdapi_v1_preprocess_post: {
    requestBody: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PreprocessResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Train Embedding */
  train_embedding_sdapi_v1_train_embedding_post: {
    requestBody: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TrainResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Train Hypernetwork */
  train_hypernetwork_sdapi_v1_train_hypernetwork_post: {
    requestBody: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TrainResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Memory */
  get_memory_sdapi_v1_memory_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MemoryResponse"];
        };
      };
    };
  };
  /** Unloadapi */
  unloadapi_sdapi_v1_unload_checkpoint_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Reloadapi */
  reloadapi_sdapi_v1_reload_checkpoint_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Get Scripts List */
  get_scripts_list_sdapi_v1_scripts_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScriptsList"];
        };
      };
    };
  };
  /** Fetch File */
  fetch_file_sd_extra_networks_thumb_get: {
    parameters: {
      query: {
        filename?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Metadata */
  get_metadata_sd_extra_networks_metadata_get: {
    parameters: {
      query: {
        page?: string;
        item?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
